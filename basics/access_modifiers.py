# Модификаторы доступа
# Модификаторы доступа в Python используются для модификации области видимости переменных по умолчанию. Есть три типа
# модификаторов доступов в Python ООП:

# публичный — public;
# приватный — private;
# защищенный — protected.

# Доступ к переменным с модификаторами публичного доступа открыт из любой точки вне класса,
# доступ к приватным переменным открыт только внутри класса,
# и в случае с защищенными переменными, доступ открыт только внутри того же пакета.

# Для создания приватной переменной, вам нужно проставить префикс двойного подчеркивание __ с названием переменной.

# Для создания защищенной переменной, вам нужно проставить префикс из одного нижнего подчеркивания _ с названием
# переменной.

# Для публичных переменных, вам не нужно проставлять префиксы вообще.

# Давайте взглянем на публичные, приватные и защищенные переменные в действии. Выполните следующий скрипт:

class Car:
    def __init__(self):
        print("Двигатель заведен")
        self.name = "corolla"
        self.__make = "toyota"
        self._model = 1999


# Здесь мы создали простой класс Car с конструктором и тремя переменными: name, make, и model (название, марка и
# модель).
# Переменная name является публичной, в то время как переменные make и model являются приватными и защищенными,
# соответственно.

# Давайте создадим объект класса Car и попытаемся получить доступ к переменной name. Выполним следующий скрипт:

car_a = Car()
print(car_a.name)

# Так как name является публичной переменной, мы можем получить к ней доступ не из класса. В выдаче вы увидите значение
# переменной name, выведенное в консоли.

# Теперь попробуем вывести значение переменной make. Выполняем следующий скрипт:

print(car_a._model)

print(car_a.make)

# В выдаче мы получим следующее уведомление об ошибке:
# AttributeError: 'Car' object has no attribute 'make'
