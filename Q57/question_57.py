# 57. Сериализация, десериализация JSON
# Пример сериализации JSON Python
# Представьте, что вы работаете с объектом Python в памяти, который выглядит следующим образом:


import json

data = {
    "president": {
        "name": "Zaphod Beeblebrox",
        "species": "Betelgeusian"
    }
}

# Сохранить эту информацию на диск — критично, так что ваша задача — записать на файл.
#
# Используя контекстный менеджер Python, вы можете создать файл под названием data_file.json и открыть его в режиме
# write (файлы JSON имеют расширение .json).

with open("data_file.json", "w+") as write_file:
    json.dump(data, write_file)

# Обратите внимание на то, что dump() принимает два позиционных аргумента: первый объект данных, который сериализуется,
# и второй, файловый объект, в который будут вписаны байты.
#
# Или, если вы склонны продолжать использовать эти сериализированные данные JSON в вашей программе, вы можете работать
# как со строкой.

json_string = json.dumps(data)
print(json_string)

# Пример десериализации JSON Python
# На этот раз, представьте что у вас есть некие данные, хранящиеся на диске, которыми вы хотите манипулировать в памяти.
# Вам все еще нужно будет воспользоваться контекстным менеджером, но на этот раз, вам нужно будет открыть существующий
# data_file.json в режиме для чтения.

with open("data_file.json", "r") as read_file:
    data = json.load(read_file)
    print(data)
